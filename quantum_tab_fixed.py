import streamlit as st
from utils.db import fetch_documents
from utils.score_utils import draw_scorecard, get_score_analysis, get_deep_diagnostics
from utils.hf_ai_scoring import evaluate_quantum_maturity_hf

def render():
    st.header("üß† Quantum Maturity Score (Hybrid AI + Stored Data)")
    
    # Show compact legend at top
    st.markdown("**Maturity Levels:** üî¥ Initial  üü† Basic  üü° Developing  üü¢ Advanced  üü£ Expert")
    st.markdown("---")
    
    documents = fetch_documents()
    st.write("Found", len(documents), "documents.")

    for doc in documents:
        base_score = doc.get("quantum_q", 0)

        text_blob = doc.get("text") or doc.get("content")
        if text_blob:
            hf_result = evaluate_quantum_maturity_hf(text_blob)
            score = hf_result["patent_score"]
            label = hf_result["label"]
            narrative = hf_result["narrative"]
            raw_conf = hf_result["raw"]
            traits = hf_result.get("traits", {})
        else:
            score = base_score
            label = "Stored"
            narrative = []
            raw_conf = {}
            traits = {}

        st.subheader(doc.get("title", "Untitled Document"))

        if score > 0:
            draw_scorecard("Quantum Ethics", score)

            st.markdown("### Analysis")
            st.markdown(get_score_analysis(score, "quantum ethics", 
                                         doc_title=doc.get("title", ""), 
                                         doc_content=text_blob or "", 
                                         doc_type=doc.get("document_type")))

            st.markdown("### Key Factors")
            st.markdown("- Post-Quantum\n- Surveillance\n- Weaponization\n- Cryptographic Migration")

            with st.expander("üß¨ AI Diagnostic Report"):
                st.markdown("This score was generated by evaluating the document with Hugging Face's zero-shot classifier against a custom label set.")
                st.markdown("**Matched Indicators:**")
                for item in narrative:
                    st.markdown(f"- {item}")

                st.markdown("### Confidence Scores (Raw)")
                for label, conf in raw_conf.items():
                    try:
                        score_value = float(conf)
                        st.markdown(f"{label}: **{score_value:.2f}**")
                    except (ValueError, TypeError):
                        st.markdown(f"{label}: *non-numeric result*")

                st.markdown("### Maturity Trait Detection")
                st.markdown(f"- Implementation Plan: {'‚úÖ' if traits.get('implementation_plan') else '‚ùå'}")
                st.markdown(f"- Standards Reference: {'‚úÖ' if traits.get('standards_reference') else '‚ùå'}")
                st.markdown(f"- Roadmap/Timeline: {'‚úÖ' if traits.get('roadmap_timeline') else '‚ùå'}")

                st.markdown("### How Scores Are Weighted")
                st.markdown("""
                - Awareness labels weighted **0.8**
                - Readiness labels weighted **1.2**
                - Controls labels weighted **1.5**
                
                The final maturity score is based on the weighted average of all matched labels.
                """)

                st.markdown("### Recommendations to Improve Score")
                if not traits.get("implementation_plan"):
                    st.markdown("- Add a clear implementation plan for quantum-safe cryptography.")
                if not traits.get("standards_reference"):
                    st.markdown("- Reference specific standards like NIST PQC or FIPS 203/204.")
                if not traits.get("roadmap_timeline"):
                    st.markdown("- Include a migration roadmap or timeline.")

                if all(t == False for t in traits.values()):
                    st.markdown("- Add more technical specificity. Document lacks maturity elements.")

                st.markdown(get_deep_diagnostics(score, "quantum ethics"))
        else:
            st.markdown("**Quantum Score:** N/A")
            st.markdown("_This document does not appear to contain any quantum-related content._")

        st.markdown("‚Äî" * 15)